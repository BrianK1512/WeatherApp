document.getElementById('searchForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission
    getWeather();
});

async function getWeather() {
    const apiKey = '5b54bca2aef3c5ae1dd32b9017b80bb8'; // Replace with your OpenWeatherMap API key
    const city = document.getElementById('cityInput').value.trim();
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;

    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`City not found: ${city}`);
        }
        const data = await response.json();
        displayWeather(data);
    } catch (error) {
        displayError(error.message);
    }
}

function displayWeather(data) {
    const weatherInfo = document.getElementById('weatherInfo');
    weatherInfo.innerHTML = `
        <h2>${data.name}, ${data.sys.country}</h2>
        <p>Temperature: ${data.main.temp} °C</p>
        <p>Weather: ${data.weather[0].description}</p>
        <p>Humidity: ${data.main.humidity}%</p>
        <p>Wind Speed: ${data.wind.speed} m/s</p>
    `;
}

function displayError(message) {
    const weatherInfo = document.getElementById('weatherInfo');
    weatherInfo.innerHTML = `<p style="color: red;">${message}</p>`;
}
let currentCity = '';

document.getElementById('searchForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission
    getWeather();
});

document.getElementById('refreshButton').addEventListener('click', getWeather);

async function getWeather() {
    const apiKey = '5b54bca2aef3c5ae1dd32b9017b80bb8'; // Replace with your OpenWeatherMap API key
    const city = document.getElementById('cityInput').value.trim() || currentCity;

    if (!city) return; // Prevent fetching if no city is provided

    currentCity = city; // Store current city

    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;

    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`City not found: ${city}`);
        }
        const data = await response.json();
        displayWeather(data);
    } catch (error) {
        displayError(error.message);
    }
}

// Automatically update weather every 5 minutes (300000 ms)
setInterval(getWeather, 300000);

function displayWeather(data) {
    const weatherInfo = document.getElementById('weatherInfo');
    weatherInfo.innerHTML = `
        <h2>${data.name}, ${data.sys.country}</h2>
        <p>Temperature: ${data.main.temp} °C</p>
        <p>Weather: ${data.weather[0].description}</p>
        <p>Humidity: ${data.main.humidity}%</p>
        <p>Wind Speed: ${data.wind.speed} m/s</p>
    `;
}

function displayError(message) {
    const weatherInfo = document.getElementById('weatherInfo');
    weatherInfo.innerHTML = `<p style="color: red;">${message}</p>`;
}
let currentCity = '';

document.getElementById('searchForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission
    getWeather();
});

document.getElementById('refreshButton').addEventListener('click', getWeather);

async function getWeather() {
    const apiKey = '5b54bca2aef3c5ae1dd32b9017b80bb8'; // Replace with your OpenWeatherMap API key
    const city = document.getElementById('cityInput').value.trim() || currentCity;

    if (!city) return; // Prevent fetching if no city is provided

    currentCity = city; // Store current city

    const url = ;

    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`City not found: ${city}`);
        }
        const data = await response.json();
        displayWeather(data);
    } catch (error) {
        displayError(error.message);
    }
}

// Automatically update weather every 5 minutes (300000 ms)
setInterval(getWeather, 300000);

function displayWeather(data) {
    const weatherInfo = document.getElementById('weatherInfo');
    weatherInfo.innerHTML = `
        <div class="weather-card">
            <h2>${data.name}, ${data.sys.country}</h2>
            <div class="weather-detail"><strong>Temperature:</strong> ${data.main.temp} °C</div>
            <div class="weather-detail"><strong>Weather:</strong> ${data.weather[0].description}</div>
            <div class="weather-detail"><strong>Humidity:</strong> ${data.main.humidity}%</div>
            <div class="weather-detail"><strong>Wind Speed:</strong> ${data.wind.speed} m/s</div>
            <div class="weather-detail"><strong>Feels Like:</strong> ${data.main.feels_like} °C</div>
            <div class="weather-detail"><strong>Pressure:</strong> ${data.main.pressure} hPa</div>
        </div>
    `;
}

function displayError(message) {
    const weatherInfo = document.getElementById('weatherInfo');
    weatherInfo.innerHTML = `<p style="color: red;">${message}</p>`;
}
module.exports = {
    content: ['./src/**/*.{js,jsx,ts,tsx}', './public/index.html'],
    theme: {
      extend: {},
    },
    plugins: [],
  };
// src/WeatherDashboard.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const WeatherDashboard = () => {
  const [city, setCity] = useState('');
  const [weatherData, setWeatherData] = useState(null);
  const [error, setError] = useState('');
  const API_KEY = 'YOUR_API_KEY'; // Replace with your OpenWeatherMap API key

  const fetchWeather = async () => {
    if (!city) {
      setError('Please enter a city name.');
      return;
    }

    try {
      const response = await axios.get(
        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`
      );
      setWeatherData(response.data);
      setError('');
    } catch (err) {
      if (err.response && err.response.status === 404) {
        setError('City not found! Please check the spelling.');
      } else {
        setError('An error occurred while fetching the weather data.');
      }
      setWeatherData(null);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    fetchWeather();
  };

  const handleRefresh = () => {
    fetchWeather();
  };

  useEffect(() => {
    // Automatically fetch weather data every 5 minutes (300000 ms)
    const interval = setInterval(() => {
      if (weatherData) {
        fetchWeather();
      }
    }, 300000);

    // Cleanup interval on component unmount
    return () => clearInterval(interval);
  }, [weatherData]);

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-r from-blue-400 to-blue-600">
      <div className="max-w-md w-full p-6 bg-white rounded-lg shadow-lg">
        <h1 className="text-3xl font-bold text-center text-gray-800">Weather Dashboard</h1>
        <form onSubmit={handleSubmit} className="mt-5">
          <input
            type="text"
            placeholder="Enter city name"
            value={city}
            onChange={(e) => setCity(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <button
            type="submit"
            className="mt-4 w-full p-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-200"
          >
            Get Weather
          </button>
        </form>
        <button
          onClick={handleRefresh}
          className="mt-2 w-full p-2 border border-blue-500 text-blue-500 rounded-lg hover:bg-blue-500 hover:text-white transition duration-200"
        >
          Refresh Weather
        </button>
        {error && <p className="text-red-500 mt-3 text-center">{error}</p>}
        {weatherData && (
          <div className="mt-5 p-4 border-t border-gray-300">
            <h2 className="text-2xl font-semibold text-center">{weatherData.name}</h2>
            <p className="text-center">Temperature: {weatherData.main.temp} °C</p>
            <p className="text-center">Weather: {weatherData.weather[0].description}</p>
            <p className="text-center">Humidity: {weatherData.main.humidity}%</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default WeatherDashboard;
const API_KEY = 'YOUR_API_KEY'; // Replace with your OpenWeatherMap API key
const searchForm = document.getElementById('search-form');
const cityInput = document.getElementById('city-input');
const weatherResult = document.getElementById('weather-result');
const errorMessage = document.getElementById('error-message');

searchForm.addEventListener('submit', function(e) {
    e.preventDefault();
    const city = cityInput.value;
    fetchWeather(city);
});

async function fetchWeather(city) {
    errorMessage.textContent = ''; // Clear previous error message
    weatherResult.textContent = ''; // Clear previous weather result

    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);

        if (!response.ok) {
            throw new Error('City not found!');
        }

        const data = await response.json();
        displayWeather(data);
    } catch (error) {
        errorMessage.textContent = error.message;
    }
}

function displayWeather(data) {
    const { name, main, weather } = data;
    const temperature = main.temp;
    const description = weather[0].description;

    weatherResult.innerHTML = `
        <h2>${name}</h2>
        <p>Temperature: ${temperature} °C</p>
        <p>Weather: ${description}</p>
    `;
}
  
